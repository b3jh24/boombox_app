// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Boombox_HTLx_Messaging.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Boombox_HTLx_Messaging.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HTL_Messaging_schema1 {

namespace {

const ::google::protobuf::Descriptor* serverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serverConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* serverConfig_MessageID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionData_MessageID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTransfer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqTransfer_MessageID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestCompleted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCompleted_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestCompleted_MessageID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AttemptReconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttemptReconnect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AttemptReconnect_MessageID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SchemaAgreement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaAgreement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SchemaAgreement_MessageID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Boombox_5fHTLx_5fMessaging_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Boombox_5fHTLx_5fMessaging_2eproto() {
  protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Boombox_HTLx_Messaging.proto");
  GOOGLE_CHECK(file != NULL);
  serverConfig_descriptor_ = file->message_type(0);
  static const int serverConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverConfig, tcpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverConfig, udpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverConfig, udpmac_),
  };
  serverConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      serverConfig_descriptor_,
      serverConfig::default_instance_,
      serverConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(serverConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverConfig, _internal_metadata_),
      -1);
  serverConfig_MessageID_descriptor_ = serverConfig_descriptor_->enum_type(0);
  SessionData_descriptor_ = file->message_type(1);
  static const int SessionData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, bytesperlba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, maxblocksperpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, totalblocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, firstblock_),
  };
  SessionData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionData_descriptor_,
      SessionData::default_instance_,
      SessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, _has_bits_[0]),
      -1,
      -1,
      sizeof(SessionData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, _internal_metadata_),
      -1);
  SessionData_MessageID_descriptor_ = SessionData_descriptor_->enum_type(0);
  ReqTransfer_descriptor_ = file->message_type(2);
  static const int ReqTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransfer, transferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransfer, startingblockaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransfer, blocksintrans_),
  };
  ReqTransfer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTransfer_descriptor_,
      ReqTransfer::default_instance_,
      ReqTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransfer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqTransfer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTransfer, _internal_metadata_),
      -1);
  ReqTransfer_MessageID_descriptor_ = ReqTransfer_descriptor_->enum_type(0);
  RequestCompleted_descriptor_ = file->message_type(3);
  static const int RequestCompleted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompleted, transferid_),
  };
  RequestCompleted_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestCompleted_descriptor_,
      RequestCompleted::default_instance_,
      RequestCompleted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompleted, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestCompleted),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompleted, _internal_metadata_),
      -1);
  RequestCompleted_MessageID_descriptor_ = RequestCompleted_descriptor_->enum_type(0);
  AttemptReconnect_descriptor_ = file->message_type(4);
  static const int AttemptReconnect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttemptReconnect, bytesperlba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttemptReconnect, maxblocksperpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttemptReconnect, totalblocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttemptReconnect, firstblock_),
  };
  AttemptReconnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AttemptReconnect_descriptor_,
      AttemptReconnect::default_instance_,
      AttemptReconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttemptReconnect, _has_bits_[0]),
      -1,
      -1,
      sizeof(AttemptReconnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttemptReconnect, _internal_metadata_),
      -1);
  AttemptReconnect_MessageID_descriptor_ = AttemptReconnect_descriptor_->enum_type(0);
  SchemaAgreement_descriptor_ = file->message_type(5);
  static const int SchemaAgreement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaAgreement, schemaversion_),
  };
  SchemaAgreement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SchemaAgreement_descriptor_,
      SchemaAgreement::default_instance_,
      SchemaAgreement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaAgreement, _has_bits_[0]),
      -1,
      -1,
      sizeof(SchemaAgreement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaAgreement, _internal_metadata_),
      -1);
  SchemaAgreement_MessageID_descriptor_ = SchemaAgreement_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Boombox_5fHTLx_5fMessaging_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      serverConfig_descriptor_, &serverConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionData_descriptor_, &SessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTransfer_descriptor_, &ReqTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestCompleted_descriptor_, &RequestCompleted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AttemptReconnect_descriptor_, &AttemptReconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SchemaAgreement_descriptor_, &SchemaAgreement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Boombox_5fHTLx_5fMessaging_2eproto() {
  delete serverConfig::default_instance_;
  delete serverConfig_reflection_;
  delete SessionData::default_instance_;
  delete SessionData_reflection_;
  delete ReqTransfer::default_instance_;
  delete ReqTransfer_reflection_;
  delete RequestCompleted::default_instance_;
  delete RequestCompleted_reflection_;
  delete AttemptReconnect::default_instance_;
  delete AttemptReconnect_reflection_;
  delete SchemaAgreement::default_instance_;
  delete SchemaAgreement_reflection_;
}

void protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034Boombox_HTLx_Messaging.proto\022\025HTL_Mess"
    "aging_schema1\"U\n\014serverConfig\022\017\n\007tcpPort"
    "\030\001 \002(\r\022\017\n\007udpPort\030\002 \002(\r\022\016\n\006udpMac\030\003 \002(\r\""
    "\023\n\tMessageID\022\006\n\002ID\020\001\"|\n\013SessionData\022\023\n\013b"
    "ytesPerLBA\030\001 \002(\r\022\032\n\022maxBlocksPerPacket\030\002"
    " \002(\r\022\023\n\013totalBlocks\030\003 \002(\r\022\022\n\nfirstBlock\030"
    "\004 \002(\r\"\023\n\tMessageID\022\006\n\002ID\020\002\"h\n\013ReqTransfe"
    "r\022\022\n\ntransferID\030\001 \002(\r\022\031\n\021startingBlockAd"
    "dr\030\002 \002(\r\022\025\n\rblocksInTrans\030\003 \002(\r\"\023\n\tMessa"
    "geID\022\006\n\002ID\020\003\";\n\020RequestCompleted\022\022\n\ntran"
    "sferID\030\001 \002(\r\"\023\n\tMessageID\022\006\n\002ID\020\005\"\201\001\n\020At"
    "temptReconnect\022\023\n\013bytesPerLBA\030\001 \002(\r\022\032\n\022m"
    "axBlocksPerPacket\030\002 \002(\r\022\023\n\013totalBlocks\030\003"
    " \002(\r\022\022\n\nfirstBlock\030\004 \002(\r\"\023\n\tMessageID\022\006\n"
    "\002ID\020\006\"=\n\017SchemaAgreement\022\025\n\rschemaVersio"
    "n\030\001 \002(\r\"\023\n\tMessageID\022\006\n\002ID\020\007", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Boombox_HTLx_Messaging.proto", &protobuf_RegisterTypes);
  serverConfig::default_instance_ = new serverConfig();
  SessionData::default_instance_ = new SessionData();
  ReqTransfer::default_instance_ = new ReqTransfer();
  RequestCompleted::default_instance_ = new RequestCompleted();
  AttemptReconnect::default_instance_ = new AttemptReconnect();
  SchemaAgreement::default_instance_ = new SchemaAgreement();
  serverConfig::default_instance_->InitAsDefaultInstance();
  SessionData::default_instance_->InitAsDefaultInstance();
  ReqTransfer::default_instance_->InitAsDefaultInstance();
  RequestCompleted::default_instance_->InitAsDefaultInstance();
  AttemptReconnect::default_instance_->InitAsDefaultInstance();
  SchemaAgreement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Boombox_5fHTLx_5fMessaging_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Boombox_5fHTLx_5fMessaging_2eproto {
  StaticDescriptorInitializer_Boombox_5fHTLx_5fMessaging_2eproto() {
    protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  }
} static_descriptor_initializer_Boombox_5fHTLx_5fMessaging_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* serverConfig_MessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serverConfig_MessageID_descriptor_;
}
bool serverConfig_MessageID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const serverConfig_MessageID serverConfig::ID;
const serverConfig_MessageID serverConfig::MessageID_MIN;
const serverConfig_MessageID serverConfig::MessageID_MAX;
const int serverConfig::MessageID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int serverConfig::kTcpPortFieldNumber;
const int serverConfig::kUdpPortFieldNumber;
const int serverConfig::kUdpMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

serverConfig::serverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTL_Messaging_schema1.serverConfig)
}

void serverConfig::InitAsDefaultInstance() {
}

serverConfig::serverConfig(const serverConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTL_Messaging_schema1.serverConfig)
}

void serverConfig::SharedCtor() {
  _cached_size_ = 0;
  tcpport_ = 0u;
  udpport_ = 0u;
  udpmac_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serverConfig::~serverConfig() {
  // @@protoc_insertion_point(destructor:HTL_Messaging_schema1.serverConfig)
  SharedDtor();
}

void serverConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void serverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serverConfig_descriptor_;
}

const serverConfig& serverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  return *default_instance_;
}

serverConfig* serverConfig::default_instance_ = NULL;

serverConfig* serverConfig::New(::google::protobuf::Arena* arena) const {
  serverConfig* n = new serverConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void serverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:HTL_Messaging_schema1.serverConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(serverConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<serverConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tcpport_, udpmac_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool serverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTL_Messaging_schema1.serverConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tcpPort = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpport_)));
          set_has_tcpport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_udpPort;
        break;
      }

      // required uint32 udpPort = 2;
      case 2: {
        if (tag == 16) {
         parse_udpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udpport_)));
          set_has_udpport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_udpMac;
        break;
      }

      // required uint32 udpMac = 3;
      case 3: {
        if (tag == 24) {
         parse_udpMac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udpmac_)));
          set_has_udpmac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTL_Messaging_schema1.serverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTL_Messaging_schema1.serverConfig)
  return false;
#undef DO_
}

void serverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTL_Messaging_schema1.serverConfig)
  // required uint32 tcpPort = 1;
  if (has_tcpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tcpport(), output);
  }

  // required uint32 udpPort = 2;
  if (has_udpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->udpport(), output);
  }

  // required uint32 udpMac = 3;
  if (has_udpmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->udpmac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTL_Messaging_schema1.serverConfig)
}

::google::protobuf::uint8* serverConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTL_Messaging_schema1.serverConfig)
  // required uint32 tcpPort = 1;
  if (has_tcpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tcpport(), target);
  }

  // required uint32 udpPort = 2;
  if (has_udpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->udpport(), target);
  }

  // required uint32 udpMac = 3;
  if (has_udpmac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->udpmac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTL_Messaging_schema1.serverConfig)
  return target;
}

int serverConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HTL_Messaging_schema1.serverConfig)
  int total_size = 0;

  if (has_tcpport()) {
    // required uint32 tcpPort = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpport());
  }

  if (has_udpport()) {
    // required uint32 udpPort = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->udpport());
  }

  if (has_udpmac()) {
    // required uint32 udpMac = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->udpmac());
  }

  return total_size;
}
int serverConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTL_Messaging_schema1.serverConfig)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 tcpPort = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpport());

    // required uint32 udpPort = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->udpport());

    // required uint32 udpMac = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->udpmac());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serverConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTL_Messaging_schema1.serverConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const serverConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const serverConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTL_Messaging_schema1.serverConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTL_Messaging_schema1.serverConfig)
    MergeFrom(*source);
  }
}

void serverConfig::MergeFrom(const serverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTL_Messaging_schema1.serverConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tcpport()) {
      set_tcpport(from.tcpport());
    }
    if (from.has_udpport()) {
      set_udpport(from.udpport());
    }
    if (from.has_udpmac()) {
      set_udpmac(from.udpmac());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void serverConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTL_Messaging_schema1.serverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serverConfig::CopyFrom(const serverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTL_Messaging_schema1.serverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void serverConfig::Swap(serverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void serverConfig::InternalSwap(serverConfig* other) {
  std::swap(tcpport_, other->tcpport_);
  std::swap(udpport_, other->udpport_);
  std::swap(udpmac_, other->udpmac_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata serverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serverConfig_descriptor_;
  metadata.reflection = serverConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// serverConfig

// required uint32 tcpPort = 1;
bool serverConfig::has_tcpport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void serverConfig::set_has_tcpport() {
  _has_bits_[0] |= 0x00000001u;
}
void serverConfig::clear_has_tcpport() {
  _has_bits_[0] &= ~0x00000001u;
}
void serverConfig::clear_tcpport() {
  tcpport_ = 0u;
  clear_has_tcpport();
}
 ::google::protobuf::uint32 serverConfig::tcpport() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.serverConfig.tcpPort)
  return tcpport_;
}
 void serverConfig::set_tcpport(::google::protobuf::uint32 value) {
  set_has_tcpport();
  tcpport_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.serverConfig.tcpPort)
}

// required uint32 udpPort = 2;
bool serverConfig::has_udpport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void serverConfig::set_has_udpport() {
  _has_bits_[0] |= 0x00000002u;
}
void serverConfig::clear_has_udpport() {
  _has_bits_[0] &= ~0x00000002u;
}
void serverConfig::clear_udpport() {
  udpport_ = 0u;
  clear_has_udpport();
}
 ::google::protobuf::uint32 serverConfig::udpport() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.serverConfig.udpPort)
  return udpport_;
}
 void serverConfig::set_udpport(::google::protobuf::uint32 value) {
  set_has_udpport();
  udpport_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.serverConfig.udpPort)
}

// required uint32 udpMac = 3;
bool serverConfig::has_udpmac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void serverConfig::set_has_udpmac() {
  _has_bits_[0] |= 0x00000004u;
}
void serverConfig::clear_has_udpmac() {
  _has_bits_[0] &= ~0x00000004u;
}
void serverConfig::clear_udpmac() {
  udpmac_ = 0u;
  clear_has_udpmac();
}
 ::google::protobuf::uint32 serverConfig::udpmac() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.serverConfig.udpMac)
  return udpmac_;
}
 void serverConfig::set_udpmac(::google::protobuf::uint32 value) {
  set_has_udpmac();
  udpmac_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.serverConfig.udpMac)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SessionData_MessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionData_MessageID_descriptor_;
}
bool SessionData_MessageID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionData_MessageID SessionData::ID;
const SessionData_MessageID SessionData::MessageID_MIN;
const SessionData_MessageID SessionData::MessageID_MAX;
const int SessionData::MessageID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionData::kBytesPerLBAFieldNumber;
const int SessionData::kMaxBlocksPerPacketFieldNumber;
const int SessionData::kTotalBlocksFieldNumber;
const int SessionData::kFirstBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionData::SessionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTL_Messaging_schema1.SessionData)
}

void SessionData::InitAsDefaultInstance() {
}

SessionData::SessionData(const SessionData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTL_Messaging_schema1.SessionData)
}

void SessionData::SharedCtor() {
  _cached_size_ = 0;
  bytesperlba_ = 0u;
  maxblocksperpacket_ = 0u;
  totalblocks_ = 0u;
  firstblock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionData::~SessionData() {
  // @@protoc_insertion_point(destructor:HTL_Messaging_schema1.SessionData)
  SharedDtor();
}

void SessionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionData_descriptor_;
}

const SessionData& SessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  return *default_instance_;
}

SessionData* SessionData::default_instance_ = NULL;

SessionData* SessionData::New(::google::protobuf::Arena* arena) const {
  SessionData* n = new SessionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:HTL_Messaging_schema1.SessionData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SessionData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SessionData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bytesperlba_, firstblock_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTL_Messaging_schema1.SessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bytesPerLBA = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytesperlba_)));
          set_has_bytesperlba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxBlocksPerPacket;
        break;
      }

      // required uint32 maxBlocksPerPacket = 2;
      case 2: {
        if (tag == 16) {
         parse_maxBlocksPerPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxblocksperpacket_)));
          set_has_maxblocksperpacket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalBlocks;
        break;
      }

      // required uint32 totalBlocks = 3;
      case 3: {
        if (tag == 24) {
         parse_totalBlocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalblocks_)));
          set_has_totalblocks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_firstBlock;
        break;
      }

      // required uint32 firstBlock = 4;
      case 4: {
        if (tag == 32) {
         parse_firstBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstblock_)));
          set_has_firstblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTL_Messaging_schema1.SessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTL_Messaging_schema1.SessionData)
  return false;
#undef DO_
}

void SessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTL_Messaging_schema1.SessionData)
  // required uint32 bytesPerLBA = 1;
  if (has_bytesperlba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bytesperlba(), output);
  }

  // required uint32 maxBlocksPerPacket = 2;
  if (has_maxblocksperpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxblocksperpacket(), output);
  }

  // required uint32 totalBlocks = 3;
  if (has_totalblocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalblocks(), output);
  }

  // required uint32 firstBlock = 4;
  if (has_firstblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->firstblock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTL_Messaging_schema1.SessionData)
}

::google::protobuf::uint8* SessionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTL_Messaging_schema1.SessionData)
  // required uint32 bytesPerLBA = 1;
  if (has_bytesperlba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bytesperlba(), target);
  }

  // required uint32 maxBlocksPerPacket = 2;
  if (has_maxblocksperpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxblocksperpacket(), target);
  }

  // required uint32 totalBlocks = 3;
  if (has_totalblocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalblocks(), target);
  }

  // required uint32 firstBlock = 4;
  if (has_firstblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->firstblock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTL_Messaging_schema1.SessionData)
  return target;
}

int SessionData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HTL_Messaging_schema1.SessionData)
  int total_size = 0;

  if (has_bytesperlba()) {
    // required uint32 bytesPerLBA = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytesperlba());
  }

  if (has_maxblocksperpacket()) {
    // required uint32 maxBlocksPerPacket = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxblocksperpacket());
  }

  if (has_totalblocks()) {
    // required uint32 totalBlocks = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalblocks());
  }

  if (has_firstblock()) {
    // required uint32 firstBlock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstblock());
  }

  return total_size;
}
int SessionData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTL_Messaging_schema1.SessionData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 bytesPerLBA = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytesperlba());

    // required uint32 maxBlocksPerPacket = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxblocksperpacket());

    // required uint32 totalBlocks = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalblocks());

    // required uint32 firstBlock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstblock());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTL_Messaging_schema1.SessionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTL_Messaging_schema1.SessionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTL_Messaging_schema1.SessionData)
    MergeFrom(*source);
  }
}

void SessionData::MergeFrom(const SessionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTL_Messaging_schema1.SessionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytesperlba()) {
      set_bytesperlba(from.bytesperlba());
    }
    if (from.has_maxblocksperpacket()) {
      set_maxblocksperpacket(from.maxblocksperpacket());
    }
    if (from.has_totalblocks()) {
      set_totalblocks(from.totalblocks());
    }
    if (from.has_firstblock()) {
      set_firstblock(from.firstblock());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SessionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTL_Messaging_schema1.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionData::CopyFrom(const SessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTL_Messaging_schema1.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SessionData::Swap(SessionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionData::InternalSwap(SessionData* other) {
  std::swap(bytesperlba_, other->bytesperlba_);
  std::swap(maxblocksperpacket_, other->maxblocksperpacket_);
  std::swap(totalblocks_, other->totalblocks_);
  std::swap(firstblock_, other->firstblock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionData_descriptor_;
  metadata.reflection = SessionData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionData

// required uint32 bytesPerLBA = 1;
bool SessionData::has_bytesperlba() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionData::set_has_bytesperlba() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionData::clear_has_bytesperlba() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionData::clear_bytesperlba() {
  bytesperlba_ = 0u;
  clear_has_bytesperlba();
}
 ::google::protobuf::uint32 SessionData::bytesperlba() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.SessionData.bytesPerLBA)
  return bytesperlba_;
}
 void SessionData::set_bytesperlba(::google::protobuf::uint32 value) {
  set_has_bytesperlba();
  bytesperlba_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.SessionData.bytesPerLBA)
}

// required uint32 maxBlocksPerPacket = 2;
bool SessionData::has_maxblocksperpacket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionData::set_has_maxblocksperpacket() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionData::clear_has_maxblocksperpacket() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionData::clear_maxblocksperpacket() {
  maxblocksperpacket_ = 0u;
  clear_has_maxblocksperpacket();
}
 ::google::protobuf::uint32 SessionData::maxblocksperpacket() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.SessionData.maxBlocksPerPacket)
  return maxblocksperpacket_;
}
 void SessionData::set_maxblocksperpacket(::google::protobuf::uint32 value) {
  set_has_maxblocksperpacket();
  maxblocksperpacket_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.SessionData.maxBlocksPerPacket)
}

// required uint32 totalBlocks = 3;
bool SessionData::has_totalblocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionData::set_has_totalblocks() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionData::clear_has_totalblocks() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionData::clear_totalblocks() {
  totalblocks_ = 0u;
  clear_has_totalblocks();
}
 ::google::protobuf::uint32 SessionData::totalblocks() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.SessionData.totalBlocks)
  return totalblocks_;
}
 void SessionData::set_totalblocks(::google::protobuf::uint32 value) {
  set_has_totalblocks();
  totalblocks_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.SessionData.totalBlocks)
}

// required uint32 firstBlock = 4;
bool SessionData::has_firstblock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionData::set_has_firstblock() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionData::clear_has_firstblock() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionData::clear_firstblock() {
  firstblock_ = 0u;
  clear_has_firstblock();
}
 ::google::protobuf::uint32 SessionData::firstblock() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.SessionData.firstBlock)
  return firstblock_;
}
 void SessionData::set_firstblock(::google::protobuf::uint32 value) {
  set_has_firstblock();
  firstblock_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.SessionData.firstBlock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqTransfer_MessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTransfer_MessageID_descriptor_;
}
bool ReqTransfer_MessageID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqTransfer_MessageID ReqTransfer::ID;
const ReqTransfer_MessageID ReqTransfer::MessageID_MIN;
const ReqTransfer_MessageID ReqTransfer::MessageID_MAX;
const int ReqTransfer::MessageID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTransfer::kTransferIDFieldNumber;
const int ReqTransfer::kStartingBlockAddrFieldNumber;
const int ReqTransfer::kBlocksInTransFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTransfer::ReqTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTL_Messaging_schema1.ReqTransfer)
}

void ReqTransfer::InitAsDefaultInstance() {
}

ReqTransfer::ReqTransfer(const ReqTransfer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTL_Messaging_schema1.ReqTransfer)
}

void ReqTransfer::SharedCtor() {
  _cached_size_ = 0;
  transferid_ = 0u;
  startingblockaddr_ = 0u;
  blocksintrans_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTransfer::~ReqTransfer() {
  // @@protoc_insertion_point(destructor:HTL_Messaging_schema1.ReqTransfer)
  SharedDtor();
}

void ReqTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTransfer_descriptor_;
}

const ReqTransfer& ReqTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  return *default_instance_;
}

ReqTransfer* ReqTransfer::default_instance_ = NULL;

ReqTransfer* ReqTransfer::New(::google::protobuf::Arena* arena) const {
  ReqTransfer* n = new ReqTransfer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:HTL_Messaging_schema1.ReqTransfer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqTransfer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqTransfer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(transferid_, blocksintrans_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTL_Messaging_schema1.ReqTransfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 transferID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transferid_)));
          set_has_transferid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startingBlockAddr;
        break;
      }

      // required uint32 startingBlockAddr = 2;
      case 2: {
        if (tag == 16) {
         parse_startingBlockAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startingblockaddr_)));
          set_has_startingblockaddr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blocksInTrans;
        break;
      }

      // required uint32 blocksInTrans = 3;
      case 3: {
        if (tag == 24) {
         parse_blocksInTrans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blocksintrans_)));
          set_has_blocksintrans();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTL_Messaging_schema1.ReqTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTL_Messaging_schema1.ReqTransfer)
  return false;
#undef DO_
}

void ReqTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTL_Messaging_schema1.ReqTransfer)
  // required uint32 transferID = 1;
  if (has_transferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->transferid(), output);
  }

  // required uint32 startingBlockAddr = 2;
  if (has_startingblockaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startingblockaddr(), output);
  }

  // required uint32 blocksInTrans = 3;
  if (has_blocksintrans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blocksintrans(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTL_Messaging_schema1.ReqTransfer)
}

::google::protobuf::uint8* ReqTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTL_Messaging_schema1.ReqTransfer)
  // required uint32 transferID = 1;
  if (has_transferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->transferid(), target);
  }

  // required uint32 startingBlockAddr = 2;
  if (has_startingblockaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startingblockaddr(), target);
  }

  // required uint32 blocksInTrans = 3;
  if (has_blocksintrans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blocksintrans(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTL_Messaging_schema1.ReqTransfer)
  return target;
}

int ReqTransfer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HTL_Messaging_schema1.ReqTransfer)
  int total_size = 0;

  if (has_transferid()) {
    // required uint32 transferID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transferid());
  }

  if (has_startingblockaddr()) {
    // required uint32 startingBlockAddr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startingblockaddr());
  }

  if (has_blocksintrans()) {
    // required uint32 blocksInTrans = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blocksintrans());
  }

  return total_size;
}
int ReqTransfer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTL_Messaging_schema1.ReqTransfer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 transferID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transferid());

    // required uint32 startingBlockAddr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startingblockaddr());

    // required uint32 blocksInTrans = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blocksintrans());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTL_Messaging_schema1.ReqTransfer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqTransfer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTL_Messaging_schema1.ReqTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTL_Messaging_schema1.ReqTransfer)
    MergeFrom(*source);
  }
}

void ReqTransfer::MergeFrom(const ReqTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTL_Messaging_schema1.ReqTransfer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transferid()) {
      set_transferid(from.transferid());
    }
    if (from.has_startingblockaddr()) {
      set_startingblockaddr(from.startingblockaddr());
    }
    if (from.has_blocksintrans()) {
      set_blocksintrans(from.blocksintrans());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTL_Messaging_schema1.ReqTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTransfer::CopyFrom(const ReqTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTL_Messaging_schema1.ReqTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTransfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqTransfer::Swap(ReqTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTransfer::InternalSwap(ReqTransfer* other) {
  std::swap(transferid_, other->transferid_);
  std::swap(startingblockaddr_, other->startingblockaddr_);
  std::swap(blocksintrans_, other->blocksintrans_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTransfer_descriptor_;
  metadata.reflection = ReqTransfer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTransfer

// required uint32 transferID = 1;
bool ReqTransfer::has_transferid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqTransfer::set_has_transferid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqTransfer::clear_has_transferid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqTransfer::clear_transferid() {
  transferid_ = 0u;
  clear_has_transferid();
}
 ::google::protobuf::uint32 ReqTransfer::transferid() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.ReqTransfer.transferID)
  return transferid_;
}
 void ReqTransfer::set_transferid(::google::protobuf::uint32 value) {
  set_has_transferid();
  transferid_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.ReqTransfer.transferID)
}

// required uint32 startingBlockAddr = 2;
bool ReqTransfer::has_startingblockaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqTransfer::set_has_startingblockaddr() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqTransfer::clear_has_startingblockaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqTransfer::clear_startingblockaddr() {
  startingblockaddr_ = 0u;
  clear_has_startingblockaddr();
}
 ::google::protobuf::uint32 ReqTransfer::startingblockaddr() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.ReqTransfer.startingBlockAddr)
  return startingblockaddr_;
}
 void ReqTransfer::set_startingblockaddr(::google::protobuf::uint32 value) {
  set_has_startingblockaddr();
  startingblockaddr_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.ReqTransfer.startingBlockAddr)
}

// required uint32 blocksInTrans = 3;
bool ReqTransfer::has_blocksintrans() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqTransfer::set_has_blocksintrans() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqTransfer::clear_has_blocksintrans() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqTransfer::clear_blocksintrans() {
  blocksintrans_ = 0u;
  clear_has_blocksintrans();
}
 ::google::protobuf::uint32 ReqTransfer::blocksintrans() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.ReqTransfer.blocksInTrans)
  return blocksintrans_;
}
 void ReqTransfer::set_blocksintrans(::google::protobuf::uint32 value) {
  set_has_blocksintrans();
  blocksintrans_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.ReqTransfer.blocksInTrans)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestCompleted_MessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCompleted_MessageID_descriptor_;
}
bool RequestCompleted_MessageID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestCompleted_MessageID RequestCompleted::ID;
const RequestCompleted_MessageID RequestCompleted::MessageID_MIN;
const RequestCompleted_MessageID RequestCompleted::MessageID_MAX;
const int RequestCompleted::MessageID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCompleted::kTransferIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCompleted::RequestCompleted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTL_Messaging_schema1.RequestCompleted)
}

void RequestCompleted::InitAsDefaultInstance() {
}

RequestCompleted::RequestCompleted(const RequestCompleted& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTL_Messaging_schema1.RequestCompleted)
}

void RequestCompleted::SharedCtor() {
  _cached_size_ = 0;
  transferid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCompleted::~RequestCompleted() {
  // @@protoc_insertion_point(destructor:HTL_Messaging_schema1.RequestCompleted)
  SharedDtor();
}

void RequestCompleted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCompleted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCompleted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCompleted_descriptor_;
}

const RequestCompleted& RequestCompleted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  return *default_instance_;
}

RequestCompleted* RequestCompleted::default_instance_ = NULL;

RequestCompleted* RequestCompleted::New(::google::protobuf::Arena* arena) const {
  RequestCompleted* n = new RequestCompleted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:HTL_Messaging_schema1.RequestCompleted)
  transferid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestCompleted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTL_Messaging_schema1.RequestCompleted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 transferID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transferid_)));
          set_has_transferid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTL_Messaging_schema1.RequestCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTL_Messaging_schema1.RequestCompleted)
  return false;
#undef DO_
}

void RequestCompleted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTL_Messaging_schema1.RequestCompleted)
  // required uint32 transferID = 1;
  if (has_transferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->transferid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTL_Messaging_schema1.RequestCompleted)
}

::google::protobuf::uint8* RequestCompleted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTL_Messaging_schema1.RequestCompleted)
  // required uint32 transferID = 1;
  if (has_transferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->transferid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTL_Messaging_schema1.RequestCompleted)
  return target;
}

int RequestCompleted::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTL_Messaging_schema1.RequestCompleted)
  int total_size = 0;

  // required uint32 transferID = 1;
  if (has_transferid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transferid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCompleted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTL_Messaging_schema1.RequestCompleted)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestCompleted* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCompleted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTL_Messaging_schema1.RequestCompleted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTL_Messaging_schema1.RequestCompleted)
    MergeFrom(*source);
  }
}

void RequestCompleted::MergeFrom(const RequestCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTL_Messaging_schema1.RequestCompleted)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transferid()) {
      set_transferid(from.transferid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestCompleted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTL_Messaging_schema1.RequestCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCompleted::CopyFrom(const RequestCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTL_Messaging_schema1.RequestCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCompleted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestCompleted::Swap(RequestCompleted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCompleted::InternalSwap(RequestCompleted* other) {
  std::swap(transferid_, other->transferid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCompleted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCompleted_descriptor_;
  metadata.reflection = RequestCompleted_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestCompleted

// required uint32 transferID = 1;
bool RequestCompleted::has_transferid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestCompleted::set_has_transferid() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestCompleted::clear_has_transferid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestCompleted::clear_transferid() {
  transferid_ = 0u;
  clear_has_transferid();
}
 ::google::protobuf::uint32 RequestCompleted::transferid() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.RequestCompleted.transferID)
  return transferid_;
}
 void RequestCompleted::set_transferid(::google::protobuf::uint32 value) {
  set_has_transferid();
  transferid_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.RequestCompleted.transferID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AttemptReconnect_MessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttemptReconnect_MessageID_descriptor_;
}
bool AttemptReconnect_MessageID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AttemptReconnect_MessageID AttemptReconnect::ID;
const AttemptReconnect_MessageID AttemptReconnect::MessageID_MIN;
const AttemptReconnect_MessageID AttemptReconnect::MessageID_MAX;
const int AttemptReconnect::MessageID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttemptReconnect::kBytesPerLBAFieldNumber;
const int AttemptReconnect::kMaxBlocksPerPacketFieldNumber;
const int AttemptReconnect::kTotalBlocksFieldNumber;
const int AttemptReconnect::kFirstBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttemptReconnect::AttemptReconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTL_Messaging_schema1.AttemptReconnect)
}

void AttemptReconnect::InitAsDefaultInstance() {
}

AttemptReconnect::AttemptReconnect(const AttemptReconnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTL_Messaging_schema1.AttemptReconnect)
}

void AttemptReconnect::SharedCtor() {
  _cached_size_ = 0;
  bytesperlba_ = 0u;
  maxblocksperpacket_ = 0u;
  totalblocks_ = 0u;
  firstblock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttemptReconnect::~AttemptReconnect() {
  // @@protoc_insertion_point(destructor:HTL_Messaging_schema1.AttemptReconnect)
  SharedDtor();
}

void AttemptReconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttemptReconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttemptReconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttemptReconnect_descriptor_;
}

const AttemptReconnect& AttemptReconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  return *default_instance_;
}

AttemptReconnect* AttemptReconnect::default_instance_ = NULL;

AttemptReconnect* AttemptReconnect::New(::google::protobuf::Arena* arena) const {
  AttemptReconnect* n = new AttemptReconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttemptReconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:HTL_Messaging_schema1.AttemptReconnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AttemptReconnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AttemptReconnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bytesperlba_, firstblock_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AttemptReconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTL_Messaging_schema1.AttemptReconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bytesPerLBA = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytesperlba_)));
          set_has_bytesperlba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxBlocksPerPacket;
        break;
      }

      // required uint32 maxBlocksPerPacket = 2;
      case 2: {
        if (tag == 16) {
         parse_maxBlocksPerPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxblocksperpacket_)));
          set_has_maxblocksperpacket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalBlocks;
        break;
      }

      // required uint32 totalBlocks = 3;
      case 3: {
        if (tag == 24) {
         parse_totalBlocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalblocks_)));
          set_has_totalblocks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_firstBlock;
        break;
      }

      // required uint32 firstBlock = 4;
      case 4: {
        if (tag == 32) {
         parse_firstBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstblock_)));
          set_has_firstblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTL_Messaging_schema1.AttemptReconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTL_Messaging_schema1.AttemptReconnect)
  return false;
#undef DO_
}

void AttemptReconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTL_Messaging_schema1.AttemptReconnect)
  // required uint32 bytesPerLBA = 1;
  if (has_bytesperlba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bytesperlba(), output);
  }

  // required uint32 maxBlocksPerPacket = 2;
  if (has_maxblocksperpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxblocksperpacket(), output);
  }

  // required uint32 totalBlocks = 3;
  if (has_totalblocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalblocks(), output);
  }

  // required uint32 firstBlock = 4;
  if (has_firstblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->firstblock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTL_Messaging_schema1.AttemptReconnect)
}

::google::protobuf::uint8* AttemptReconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTL_Messaging_schema1.AttemptReconnect)
  // required uint32 bytesPerLBA = 1;
  if (has_bytesperlba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bytesperlba(), target);
  }

  // required uint32 maxBlocksPerPacket = 2;
  if (has_maxblocksperpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxblocksperpacket(), target);
  }

  // required uint32 totalBlocks = 3;
  if (has_totalblocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalblocks(), target);
  }

  // required uint32 firstBlock = 4;
  if (has_firstblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->firstblock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTL_Messaging_schema1.AttemptReconnect)
  return target;
}

int AttemptReconnect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HTL_Messaging_schema1.AttemptReconnect)
  int total_size = 0;

  if (has_bytesperlba()) {
    // required uint32 bytesPerLBA = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytesperlba());
  }

  if (has_maxblocksperpacket()) {
    // required uint32 maxBlocksPerPacket = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxblocksperpacket());
  }

  if (has_totalblocks()) {
    // required uint32 totalBlocks = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalblocks());
  }

  if (has_firstblock()) {
    // required uint32 firstBlock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstblock());
  }

  return total_size;
}
int AttemptReconnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTL_Messaging_schema1.AttemptReconnect)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 bytesPerLBA = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytesperlba());

    // required uint32 maxBlocksPerPacket = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxblocksperpacket());

    // required uint32 totalBlocks = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalblocks());

    // required uint32 firstBlock = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstblock());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttemptReconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTL_Messaging_schema1.AttemptReconnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AttemptReconnect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AttemptReconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTL_Messaging_schema1.AttemptReconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTL_Messaging_schema1.AttemptReconnect)
    MergeFrom(*source);
  }
}

void AttemptReconnect::MergeFrom(const AttemptReconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTL_Messaging_schema1.AttemptReconnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytesperlba()) {
      set_bytesperlba(from.bytesperlba());
    }
    if (from.has_maxblocksperpacket()) {
      set_maxblocksperpacket(from.maxblocksperpacket());
    }
    if (from.has_totalblocks()) {
      set_totalblocks(from.totalblocks());
    }
    if (from.has_firstblock()) {
      set_firstblock(from.firstblock());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AttemptReconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTL_Messaging_schema1.AttemptReconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttemptReconnect::CopyFrom(const AttemptReconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTL_Messaging_schema1.AttemptReconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttemptReconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AttemptReconnect::Swap(AttemptReconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttemptReconnect::InternalSwap(AttemptReconnect* other) {
  std::swap(bytesperlba_, other->bytesperlba_);
  std::swap(maxblocksperpacket_, other->maxblocksperpacket_);
  std::swap(totalblocks_, other->totalblocks_);
  std::swap(firstblock_, other->firstblock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttemptReconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttemptReconnect_descriptor_;
  metadata.reflection = AttemptReconnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttemptReconnect

// required uint32 bytesPerLBA = 1;
bool AttemptReconnect::has_bytesperlba() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AttemptReconnect::set_has_bytesperlba() {
  _has_bits_[0] |= 0x00000001u;
}
void AttemptReconnect::clear_has_bytesperlba() {
  _has_bits_[0] &= ~0x00000001u;
}
void AttemptReconnect::clear_bytesperlba() {
  bytesperlba_ = 0u;
  clear_has_bytesperlba();
}
 ::google::protobuf::uint32 AttemptReconnect::bytesperlba() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.AttemptReconnect.bytesPerLBA)
  return bytesperlba_;
}
 void AttemptReconnect::set_bytesperlba(::google::protobuf::uint32 value) {
  set_has_bytesperlba();
  bytesperlba_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.AttemptReconnect.bytesPerLBA)
}

// required uint32 maxBlocksPerPacket = 2;
bool AttemptReconnect::has_maxblocksperpacket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AttemptReconnect::set_has_maxblocksperpacket() {
  _has_bits_[0] |= 0x00000002u;
}
void AttemptReconnect::clear_has_maxblocksperpacket() {
  _has_bits_[0] &= ~0x00000002u;
}
void AttemptReconnect::clear_maxblocksperpacket() {
  maxblocksperpacket_ = 0u;
  clear_has_maxblocksperpacket();
}
 ::google::protobuf::uint32 AttemptReconnect::maxblocksperpacket() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.AttemptReconnect.maxBlocksPerPacket)
  return maxblocksperpacket_;
}
 void AttemptReconnect::set_maxblocksperpacket(::google::protobuf::uint32 value) {
  set_has_maxblocksperpacket();
  maxblocksperpacket_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.AttemptReconnect.maxBlocksPerPacket)
}

// required uint32 totalBlocks = 3;
bool AttemptReconnect::has_totalblocks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AttemptReconnect::set_has_totalblocks() {
  _has_bits_[0] |= 0x00000004u;
}
void AttemptReconnect::clear_has_totalblocks() {
  _has_bits_[0] &= ~0x00000004u;
}
void AttemptReconnect::clear_totalblocks() {
  totalblocks_ = 0u;
  clear_has_totalblocks();
}
 ::google::protobuf::uint32 AttemptReconnect::totalblocks() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.AttemptReconnect.totalBlocks)
  return totalblocks_;
}
 void AttemptReconnect::set_totalblocks(::google::protobuf::uint32 value) {
  set_has_totalblocks();
  totalblocks_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.AttemptReconnect.totalBlocks)
}

// required uint32 firstBlock = 4;
bool AttemptReconnect::has_firstblock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AttemptReconnect::set_has_firstblock() {
  _has_bits_[0] |= 0x00000008u;
}
void AttemptReconnect::clear_has_firstblock() {
  _has_bits_[0] &= ~0x00000008u;
}
void AttemptReconnect::clear_firstblock() {
  firstblock_ = 0u;
  clear_has_firstblock();
}
 ::google::protobuf::uint32 AttemptReconnect::firstblock() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.AttemptReconnect.firstBlock)
  return firstblock_;
}
 void AttemptReconnect::set_firstblock(::google::protobuf::uint32 value) {
  set_has_firstblock();
  firstblock_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.AttemptReconnect.firstBlock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SchemaAgreement_MessageID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaAgreement_MessageID_descriptor_;
}
bool SchemaAgreement_MessageID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SchemaAgreement_MessageID SchemaAgreement::ID;
const SchemaAgreement_MessageID SchemaAgreement::MessageID_MIN;
const SchemaAgreement_MessageID SchemaAgreement::MessageID_MAX;
const int SchemaAgreement::MessageID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchemaAgreement::kSchemaVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchemaAgreement::SchemaAgreement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTL_Messaging_schema1.SchemaAgreement)
}

void SchemaAgreement::InitAsDefaultInstance() {
}

SchemaAgreement::SchemaAgreement(const SchemaAgreement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HTL_Messaging_schema1.SchemaAgreement)
}

void SchemaAgreement::SharedCtor() {
  _cached_size_ = 0;
  schemaversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SchemaAgreement::~SchemaAgreement() {
  // @@protoc_insertion_point(destructor:HTL_Messaging_schema1.SchemaAgreement)
  SharedDtor();
}

void SchemaAgreement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaAgreement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaAgreement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaAgreement_descriptor_;
}

const SchemaAgreement& SchemaAgreement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Boombox_5fHTLx_5fMessaging_2eproto();
  return *default_instance_;
}

SchemaAgreement* SchemaAgreement::default_instance_ = NULL;

SchemaAgreement* SchemaAgreement::New(::google::protobuf::Arena* arena) const {
  SchemaAgreement* n = new SchemaAgreement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchemaAgreement::Clear() {
// @@protoc_insertion_point(message_clear_start:HTL_Messaging_schema1.SchemaAgreement)
  schemaversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SchemaAgreement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTL_Messaging_schema1.SchemaAgreement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 schemaVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemaversion_)));
          set_has_schemaversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTL_Messaging_schema1.SchemaAgreement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTL_Messaging_schema1.SchemaAgreement)
  return false;
#undef DO_
}

void SchemaAgreement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTL_Messaging_schema1.SchemaAgreement)
  // required uint32 schemaVersion = 1;
  if (has_schemaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schemaversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTL_Messaging_schema1.SchemaAgreement)
}

::google::protobuf::uint8* SchemaAgreement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HTL_Messaging_schema1.SchemaAgreement)
  // required uint32 schemaVersion = 1;
  if (has_schemaversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schemaversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTL_Messaging_schema1.SchemaAgreement)
  return target;
}

int SchemaAgreement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HTL_Messaging_schema1.SchemaAgreement)
  int total_size = 0;

  // required uint32 schemaVersion = 1;
  if (has_schemaversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schemaversion());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaAgreement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTL_Messaging_schema1.SchemaAgreement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SchemaAgreement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SchemaAgreement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTL_Messaging_schema1.SchemaAgreement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTL_Messaging_schema1.SchemaAgreement)
    MergeFrom(*source);
  }
}

void SchemaAgreement::MergeFrom(const SchemaAgreement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTL_Messaging_schema1.SchemaAgreement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schemaversion()) {
      set_schemaversion(from.schemaversion());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SchemaAgreement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTL_Messaging_schema1.SchemaAgreement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaAgreement::CopyFrom(const SchemaAgreement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTL_Messaging_schema1.SchemaAgreement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaAgreement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SchemaAgreement::Swap(SchemaAgreement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchemaAgreement::InternalSwap(SchemaAgreement* other) {
  std::swap(schemaversion_, other->schemaversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchemaAgreement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaAgreement_descriptor_;
  metadata.reflection = SchemaAgreement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchemaAgreement

// required uint32 schemaVersion = 1;
bool SchemaAgreement::has_schemaversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SchemaAgreement::set_has_schemaversion() {
  _has_bits_[0] |= 0x00000001u;
}
void SchemaAgreement::clear_has_schemaversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void SchemaAgreement::clear_schemaversion() {
  schemaversion_ = 0u;
  clear_has_schemaversion();
}
 ::google::protobuf::uint32 SchemaAgreement::schemaversion() const {
  // @@protoc_insertion_point(field_get:HTL_Messaging_schema1.SchemaAgreement.schemaVersion)
  return schemaversion_;
}
 void SchemaAgreement::set_schemaversion(::google::protobuf::uint32 value) {
  set_has_schemaversion();
  schemaversion_ = value;
  // @@protoc_insertion_point(field_set:HTL_Messaging_schema1.SchemaAgreement.schemaVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace HTL_Messaging_schema1

// @@protoc_insertion_point(global_scope)
